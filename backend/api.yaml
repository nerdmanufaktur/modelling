swagger: '2.0'
info:
  description: >-
    This is a server controlling flipdots.  You can find out more about
    Nerdmanufaktur at [http://nerdmanufaktur.berlin](http://nerdmanufaktur.berlin). For this sample, you can use the api
    key `foobar` to test the authorization filters.
  version: 1.0.0
  title: Nerdmanufaktur Flipdot API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: hi@nerdmanufakur.berlin
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: api.nerdmanufaktur.berlin
basePath: /v1
tags:
  - name: flipdot
    description: FaaS - Flipdot as a service
    externalDocs:
      description: Find out more
      url: 'https://nerdmanufaktur.berlin'
  - name: user
    description: Operations about flipdot
    externalDocs:
      description: Find out more
      url: 'https://nerdmanufaktur.berlin'
schemes:
  - http
paths:
  /flipdot:
    post:
      tags:
        - flipdot
      summary: Create flipdot
      description: This can only be done by the logged in admin.
      operationId: createFlipdot
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created flipdot object
          required: true
          schema:
            $ref: '#/definitions/Flipdot'
      responses:
        default:
          description: successful operation
  /flipdot/createWithArray:
    post:
      tags:
        - flipdot
      summary: Creates list of flipdots with given input array
      description: ''
      operationId: createFlipdotsWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of flipdot object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Flipdot'
      responses:
        default:
          description: successful operation
  /flipdot/createWithList:
    post:
      tags:
        - flipdot
      summary: Creates list of flipdots with given input array
      description: ''
      operationId: createFlipdotsWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of flipdots object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Flipdot'
      responses:
        default:
          description: successful operation
  '/flipdot/{flipdotid}':
    get:
      tags:
        - flipdot
      summary: Get Flipdot by flipdot id
      description: ''
      operationId: getFlipdotByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: flipdotid
          in: path
          description: 'The name that needs to be fetched. Use flipdot1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Flipdot'
        '400':
          description: Invalid flipdot id supplied
        '404':
          description: Flipdot not found
    put:
      tags:
        - flipdot
      summary: Updated flipdot
      description: This can only be done by the logged in user.
      operationId: updateFlipdot
      produces:
        - application/xml
        - application/json
      parameters:
        - name: flipdotid
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated flipdot object
          required: true
          schema:
            $ref: '#/definitions/Flipdot'
      responses:
        '400':
          description: Invalid Flipdot supplied
        '404':
          description: Flipdot not found
    delete:
      tags:
        - flipdot
      summary: Delete flipdot
      description: This can only be done by the logged in user.
      operationId: deleteFlipdot
      produces:
        - application/xml
        - application/json
      parameters:
        - name: flipdotid
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid flipdot id supplied
        '404':
          description: Flipdot not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://api.nerdmanufaktur.berlin/oauth/dialog'
    flow: implicit
    scopes:
      'write:user': modify users
      'read:user': read users
      'write:flipdot': modify flipdots
      'read:flipdot': read flipdot
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      lastLogin:
        type: string
        format: date-time
      isDeveloper:
        type: boolean
        default: false
      applications:
        type: array
        items:
          $ref: '#/definitions/User'
    xml:
      name: User
  Application:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      description:
        type: string
      version:
        type: integer
      developer:
        $ref: '#/definitions/User'
    xml:
      name: Application
  Flipdot:
    type: object
    properties:
      certificateSerial:
        type: string
      mqttChannel:
        type: string
      boardWidth:
        type: integer
      boardHeight:
        type: integer
      productionDate:
        type: string
        format: date-time
      hardwareRevision:
        type: string
      softwareVersion:
        type: string
      lastOnline:
        type: string
        format: date-time
      user:
        $ref: '#/definitions/User'
      applicationQueueItems:
        type: array
        items:
          $ref: '#/definitions/Application'
    xml:
      name: Application
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Nerdmanufaktur
  url: 'http:/nerdmanufaktur.berlin'
